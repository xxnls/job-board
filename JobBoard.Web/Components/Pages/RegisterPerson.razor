@page "/register-person"
@inject ApiService<PersonCreateDto> PersonService
@inject ApiService<LocationForPersonDto> LocationService
@inject NavigationManager NavigationManager;

@if (locations == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="grid">
    <div class="col-md-6 m-auto">
            <h3>Register Person</h3>
        <form>
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name:</label>
                <input type="text" id="firstName" @bind="newPerson.FirstName" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name:</label>
                <input type="text" id="lastName" @bind="newPerson.LastName" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <input type="text" id="email" @bind="newPerson.Email" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <input type="password" id="password" @bind="newPerson.Password" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location:</label>
                <select id="location" @bind="newPerson.LocationId" class="form-select">
                    <option value="0">Select Location</option>
                    @foreach (var location in locations)
                    {
                        <option value="@location.Id">@location.City, @location.Country, @location.Address</option>
                    }
                </select>
            </div>
            <button type="button" class="btn btn-primary" @onclick="AddPerson">Register</button>
        </form>
    </div>
    <div class="col-md-3"></div>
</div>
}

@code {

    private PersonCreateDto newPerson = new PersonCreateDto();
    private List<LocationForPersonDto>? locations;

    protected override async Task OnInitializedAsync()
    {
        locations = await LocationService.GetEntities();
    }

    private async Task AddPerson()
    {
        try
        {
            var response = await PersonService.CreateEntity(newPerson);
            response.EnsureSuccessStatusCode();

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering person: {ex.Message}");
        }
    }
}
